/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.univ_grade;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author renz
 */
public class StudentGrading extends javax.swing.JInternalFrame {

    /**
     * Creates new form Student_Profile
     */
    public StudentGrading() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentGrades = new javax.swing.JTable();
        compute = new javax.swing.JButton();
        save = new javax.swing.JButton();
        addRow = new javax.swing.JButton();
        openSaved = new javax.swing.JButton();

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 153, 0)), "Edit Grading", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 24), new java.awt.Color(0, 153, 0))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(0, 204, 0));
        jPanel4.setPreferredSize(new java.awt.Dimension(660, 490));

        studentGrades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Student Name", "Prelims", "Midterms", "Finals", "Final Grading"
            }
        ));
        studentGrades.setRowHeight(30);
        jScrollPane1.setViewportView(studentGrades);

        compute.setText("Compute");
        compute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        addRow.setText("Add Row");
        addRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowActionPerformed(evt);
            }
        });

        openSaved.setText("Open Other");
        openSaved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSavedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(addRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openSaved)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compute)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(compute)
                    .addComponent(addRow)
                    .addComponent(openSaved))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save as");
        int user = chooser.showSaveDialog(this);
        if (user == JFileChooser.APPROVE_OPTION){
            File file = chooser.getSelectedFile();
            if (!file.getAbsolutePath().endsWith(".txt")){
                file = new File(file.getAbsolutePath() + ".txt");
            }
            
            Save(file);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void computeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeActionPerformed
        
        if (studentGrades.getCellEditor() != null){
            studentGrades.getCellEditor().stopCellEditing();
        }
        
        DefaultTableModel table = (DefaultTableModel) studentGrades.getModel();
        
        for (int i = 0; i<table.getRowCount();i++){
            String studentName = (String) table.getValueAt(i, 0);
            Object prelimsObj = table.getValueAt(i, 1);
            Object midtermsObj = table.getValueAt(i, 2);
            Object finalsObj = table.getValueAt(i, 3);
            
            if (studentName != null && !studentName.trim().isEmpty() && prelimsObj != null && midtermsObj != null && finalsObj != null){
                try {
                    double prelims = Double.parseDouble(prelimsObj.toString());
                    double midterms = Double.parseDouble(midtermsObj.toString());
                    double finals = Double.parseDouble(finalsObj.toString());
                    double final_grade = ((prelims * 0.3) + (midterms * 0.3) + (finals * 0.4));
                    
                    table.setValueAt(Double.parseDouble(String.format("%.2f", final_grade)), i, 4);
                } catch (NumberFormatException e){
                    System.out.println("Invalid grade input at row " + (i+1));
                }
            }
            
        }
    }//GEN-LAST:event_computeActionPerformed

    private void addRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowActionPerformed
        DefaultTableModel table = (DefaultTableModel) studentGrades.getModel();
        Object[] newRow = {"", null, null, null, null};
        table.addRow(newRow);
    }//GEN-LAST:event_addRowActionPerformed

    private void openSavedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSavedActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Open Text File");
        int user = chooser.showOpenDialog(this);
        if (user == JFileChooser.APPROVE_OPTION){
            File file = chooser.getSelectedFile();
            inputGrade(file);
        }
    }//GEN-LAST:event_openSavedActionPerformed
    
    public Object[][] OpenFile(File file){
        ArrayList<Object[]> row = new ArrayList();
        
        try (BufferedReader br = new BufferedReader(new FileReader(file))){
            String line;
            br.readLine();
            while ((line = br.readLine()) != null) {
                String[] values = line.split("\\|");
                
                String studentName = values[0].trim();
                String prelimsRaw = values[1].trim();
                String midtermsRaw = values[2].trim();
                String finalsRaw = values[3].trim();
                String final_gradingRaw = values[4].trim();
                
                double prelims = parseGrade(prelimsRaw);
                double midterms = parseGrade(midtermsRaw);
                double finals = parseGrade(finalsRaw);
                double final_grading = parseGrade(final_gradingRaw);
                
                row.add(new Object[] {studentName, prelims, midterms, finals, final_grading});

            } 
        } catch (IOException e) {
            System.out.println("Error reading file: "+e.getMessage());
        }
        return row.toArray(new Object[0][0]);
    }
    
    private void inputGrade(File file){
        Object[][] data = OpenFile(file);
        String[] colTitles = {"Student Name", "Prelims", "Midterms", "Finals", "Final Grading"};
        if (studentGrades.getModel() instanceof DefaultTableModel){
            DefaultTableModel model = (DefaultTableModel) studentGrades.getModel();

            // Clear existing rows in the model
            model.setRowCount(0);

            // Add new rows to the model
            for (Object[] rowData : data) {
                System.out.println("Adding row: " + Arrays.toString(rowData));
                model.addRow(rowData); // Add each row from the new data
            }
            
            studentGrades.setModel(model);
        } else {
        
            DefaultTableModel model = new DefaultTableModel(data, colTitles){
                @Override
                public Class<?> getColumnClass(int col){
                    return col == 0 ? String.class : Double.class;
                }
                @Override
                public boolean isCellEditable(int row, int column){
                    return true;
                }
            };

            studentGrades.setModel(model);
        }
    }
    
    private double parseGrade(String val){
        if (val.equals("MISSING")){
            return 0.0;
        }
        try {
            return Double.parseDouble(val);
            
        } catch (NumberFormatException e) {
            return 0.0;
        }
        
    }
    
    public List<Double> getGrades(){
        List<Double> grades = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) studentGrades.getModel();
        for(int i=0; i< model.getRowCount(); i++){
            Object value = model.getValueAt(i, 4);
            System.out.println("Row " + i + " Final Grading Value: " + value);
            if (value == null){
                System.out.println("Value is null for row " + i);
                continue;
            }
            if (value instanceof Number){
                grades.add(((Number) value).doubleValue());
            }
        }
        
        return grades;
    }
    
    
    
    public void Save(File file){
        String data = "Student Name | Prelims | Midterms | Finals | Final Grading\n";
        
        DefaultTableModel table = (DefaultTableModel) studentGrades.getModel();
        
        for (int row = 0; row < table.getRowCount(); row++){
            String studentName = (String) table.getValueAt(row, 0);
            Object prelims = table.getValueAt(row, 1);
            Object midterms = table.getValueAt(row, 2);
            Object finals = table.getValueAt(row, 3);
            Object final_grade = table.getValueAt(row, 4);
            
            if (studentName == null && prelims == null && midterms == null && finals == null && final_grade == null){
                continue;
            }
            
            if (prelims.toString().isEmpty() || midterms.toString().isEmpty() || finals.toString().isEmpty() || final_grade.toString().isEmpty()){
                continue;
            }
            
            String tempData = "";
            if (studentName != null && !studentName.trim().isEmpty()){
                tempData += studentName + " | ";
            } else {
                tempData +=  "Missing | ";
            }
            
            if (prelims != null){
                tempData += Double.parseDouble(prelims.toString()) + " | ";
            } else {
                tempData +=  "Missing | ";
            }
            
            if (midterms != null){
                tempData += Double.parseDouble(midterms.toString()) + " | ";
            } else {
                tempData +=  "Missing | ";
            }
            
            if (finals != null){
                tempData += Double.parseDouble(finals.toString()) + " | ";
            } else {
                tempData +=  "Missing | ";
            }
            
            if (final_grade != null){
                tempData += Double.parseDouble(final_grade.toString()) + "\n";
            } else {
                tempData +=  "Missing\n";
            }
            data += tempData;
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(data);
        } catch (IOException e){
            System.out.println("Error writing file: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRow;
    private javax.swing.JButton compute;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openSaved;
    private javax.swing.JButton save;
    public javax.swing.JTable studentGrades;
    // End of variables declaration//GEN-END:variables
}
